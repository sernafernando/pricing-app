import { useState, useEffect } from 'react';
import { productosAPI } from '../services/api';
import PricingModal from '../components/PricingModal';
import ExportModal from '../components/ExportModal';
import CalcularWebModal from '../components/CalcularWebModal';
import { useDebounce } from '../hooks/useDebounce';
import { useAuthStore } from '../store/authStore';
import styles from './Productos.module.css';
import axios from 'axios';
import xlsIcon from '../assets/xls.svg';

export default function Productos() {
  const [productos, setProductos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState(null);
  const [productoSeleccionado, setProductoSeleccionado] = useState(null);
  const [searchInput, setSearchInput] = useState('');
  const [page, setPage] = useState(1);
  const [editandoPrecio, setEditandoPrecio] = useState(null);
  const [precioTemp, setPrecioTemp] = useState('');
  const [filtroStock, setFiltroStock] = useState('todos');
  const [filtroPrecio, setFiltroPrecio] = useState('todos');
  const [totalProductos, setTotalProductos] = useState(0);
  const [pageSize, setPageSize] = useState(50);
  const [auditoriaVisible, setAuditoriaVisible] = useState(false);
  const [auditoriaData, setAuditoriaData] = useState([]);
  const [editandoRebate, setEditandoRebate] = useState(null);
  const [rebateTemp, setRebateTemp] = useState({ participa: false, porcentaje: 3.8 });
  const [editandoWebTransf, setEditandoWebTransf] = useState(null);
  const [webTransfTemp, setWebTransfTemp] = useState({ participa: false, porcentaje: 6.0 });
  const [mostrarExportModal, setMostrarExportModal] = useState(false);
  const [mostrarCalcularWebModal, setMostrarCalcularWebModal] = useState(false);
  
  // Filtros avanzados
  const [marcas, setMarcas] = useState([]);
  const [marcasSeleccionadas, setMarcasSeleccionadas] = useState([]);
  const [mostrarMenuMarcas, setMostrarMenuMarcas] = useState(false);
  const [busquedaMarca, setBusquedaMarca] = useState('');
  
  // Ordenamiento
  const [ordenamiento, setOrdenamiento] = useState([]);

  const user = useAuthStore((state) => state.user);
  const puedeEditar = ['SUPERADMIN', 'ADMIN', 'GERENTE', 'PRICING'].includes(user?.rol);

  const debouncedSearch = useDebounce(searchInput, 500);

  useEffect(() => {
    cargarStats();
    cargarMarcas();
  }, []);

  useEffect(() => {
    cargarProductos();
  }, [page, debouncedSearch, filtroStock, filtroPrecio, pageSize, marcasSeleccionadas, ordenamiento]);

  const cargarStats = async () => {
    try {
      const statsRes = await productosAPI.stats();
      setStats(statsRes.data);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  const cargarMarcas = async () => {
    try {
      const response = await productosAPI.marcas();
      setMarcas(response.data.marcas);
    } catch (error) {
      console.error('Error cargando marcas:', error);
    }
  };

  const cargarProductos = async () => {
    setLoading(true);
    try {
      const params = { page, page_size: pageSize };
      if (debouncedSearch) params.search = debouncedSearch;
      if (filtroStock === 'con_stock') params.con_stock = true;
      if (filtroStock === 'sin_stock') params.con_stock = false;
      if (filtroPrecio === 'con_precio') params.con_precio = true;
      if (filtroPrecio === 'sin_precio') params.con_precio = false;
      if (marcasSeleccionadas.length > 0) params.marcas = marcasSeleccionadas.join(',');
      if (ordenamiento.length > 0) {
        params.orden_campos = ordenamiento.map(o => o.campo).join(',');
        params.orden_direcciones = ordenamiento.map(o => o.direccion).join(',');
      }

      const productosRes = await productosAPI.listar(params);
      setTotalProductos(productosRes.data.total || productosRes.data.productos.length);

      const productosConDatos = await Promise.all(
        productosRes.data.productos.map(async (p) => {
          const ofertasRes = await axios.get(`https://pricing.gaussonline.com.ar/api/productos/${p.item_id}/ofertas-vigentes`).catch(() => null);

          const ofertaMinima = ofertasRes?.data.publicaciones
            .filter(pub => pub.tiene_oferta)
            .sort((a, b) => a.oferta.precio_final - b.oferta.precio_final)[0];

          return {
            ...p,
            mejor_oferta: ofertaMinima
          };
        })
      );

      setProductos(productosConDatos);
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleOrden = (campo) => {
    const existente = ordenamiento.find(o => o.campo === campo);
    
    if (!existente) {
      setOrdenamiento([...ordenamiento, { campo, direccion: 'asc' }]);
    } else if (existente.direccion === 'asc') {
      setOrdenamiento(ordenamiento.map(o => 
        o.campo === campo ? { ...o, direccion: 'desc' } : o
      ));
    } else {
      setOrdenamiento(ordenamiento.filter(o => o.campo !== campo));
    }
    setPage(1);
  };

  const getIconoOrden = (campo) => {
    const orden = ordenamiento.find(o => o.campo === campo);
    if (!orden) return '⇅';
    return orden.direccion === 'asc' ? '↑' : '↓';
  };

  const getNumeroOrden = (campo) => {
    const index = ordenamiento.findIndex(o => o.campo === campo);
    return index >= 0 ? index + 1 : null;
  };

  const formatearFechaGMT3 = (fechaString) => {
    const fecha = new Date(fechaString + (fechaString.includes('Z') ? '' : 'Z'));
    return fecha.toLocaleString('es-AR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false,
      timeZone: 'America/Argentina/Buenos_Aires'
    });
  };

  const verAuditoria = async (productoId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(
        `https://pricing.gaussonline.com.ar/api/productos/${productoId}/auditoria`,
        { headers: { Authorization: `Bearer ${token}` }}
      );
      setAuditoriaData(response.data);
      setAuditoriaVisible(true);
    } catch (error) {
      console.error('Error cargando auditoría:', error);
      alert('Error al cargar el historial');
    }
  };

  const getMarkupColor = (markup) => {
    if (markup === null || markup === undefined) return '#6b7280';
    if (markup < 0) return '#ef4444';
    if (markup < 1) return '#f97316';
    return '#059669';
  };

  const handleSearchChange = (e) => {
    setSearchInput(e.target.value);
    setPage(1);
  };

  const iniciarEdicion = (producto) => {
    setEditandoPrecio(producto.item_id);
    setPrecioTemp(producto.precio_lista_ml || '');
  };

  const guardarPrecio = async (itemId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(
        'https://pricing.gaussonline.com.ar/api/precios/set-rapido',
        { item_id: itemId, precio: parseFloat(precioTemp) },
        {
          headers: { Authorization: `Bearer ${token}` },
          params: { item_id: itemId, precio: parseFloat(precioTemp) }
        }
      );

      setProductos(prods => prods.map(p =>
        p.item_id === itemId
          ? { ...p, precio_lista_ml: parseFloat(precioTemp), markup: response.data.markup }
          : p
      ));

      setEditandoPrecio(null);
      cargarStats();
    } catch (error) {
      alert('Error al guardar precio');
    }
  };

  const guardarRebate = async (itemId) => {
    try {
      const token = localStorage.getItem('token');

      await axios.patch(
        `https://pricing.gaussonline.com.ar/api/productos/${itemId}/rebate`,
        {
          participa_rebate: rebateTemp.participa,
          porcentaje_rebate: rebateTemp.porcentaje
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setProductos(prods => prods.map(p =>
        p.item_id === itemId
          ? {
              ...p,
              participa_rebate: rebateTemp.participa,
              porcentaje_rebate: rebateTemp.porcentaje,
              precio_rebate: rebateTemp.participa && p.precio_lista_ml
                ? p.precio_lista_ml / (1 - rebateTemp.porcentaje / 100)
                : null
            }
          : p
      ));

      setEditandoRebate(null);
    } catch (error) {
      console.error('Error al guardar rebate:', error);
      alert('Error al guardar rebate');
    }
  };

  const iniciarEdicionRebate = (producto) => {
    setEditandoRebate(producto.item_id);
    setRebateTemp({
      participa: producto.participa_rebate || false,
      porcentaje: producto.porcentaje_rebate || 3.8
    });
  };

  const iniciarEdicionWebTransf = (producto) => {
    setEditandoWebTransf(producto.item_id);
    setWebTransfTemp({
      participa: producto.participa_web_transferencia || false,
      porcentaje: producto.porcentaje_markup_web || 6.0
    });
  };

  const guardarWebTransf = async (itemId) => {
    try {
      const token = localStorage.getItem('token');
      
      const response = await axios.patch(
        `https://pricing.gaussonline.com.ar/api/productos/${itemId}/web-transferencia`,
        null,
        {
          params: {
            participa: webTransfTemp.participa,
            porcentaje_markup: webTransfTemp.porcentaje
          },
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      setProductos(prods => prods.map(p =>
        p.item_id === itemId
          ? {
              ...p,
              participa_web_transferencia: webTransfTemp.participa,
              porcentaje_markup_web: webTransfTemp.porcentaje,
              precio_web_transferencia: response.data.precio_web_transferencia,
              markup_web_real: response.data.markup_web_real
            }
          : p
      ));
      
      setEditandoWebTransf(null);
    } catch (error) {
      console.error('Error al guardar web transferencia:', error);
      alert('Error al guardar');
    }
  };

  const marcasFiltradas = marcas.filter(m => 
    m.toLowerCase().includes(busquedaMarca.toLowerCase())
  );

  return (
    <div className={styles.container}>
      <div className={styles.statsGrid}>
        <div className={styles.statCard}>
          <div className={styles.statLabel}>Total Productos</div>
          <div className={styles.statValue}>{stats?.total_productos || 0}</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statLabel}>Con Stock</div>
          <div className={`${styles.statValue} ${styles.green}`}>{stats?.con_stock || 0}</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statLabel}>Sin Precio</div>
          <div className={`${styles.statValue} ${styles.red}`}>{stats?.sin_precio || 0}</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statLabel}>Con Precio</div>
          <div className={`${styles.statValue} ${styles.green}`}>{stats?.con_precio || 0}</div>
        </div>
      </div>

      <div className={styles.filtersContainer}>
        <input
          type="text"
          placeholder="Buscar por código, descripción o marca..."
          value={searchInput}
          onChange={handleSearchChange}
          className={styles.searchInput}
        />

        <select
          value={filtroStock}
          onChange={(e) => { setFiltroStock(e.target.value); setPage(1); }}
          className={styles.filterSelect}
        >
          <option value="todos">Todos (Stock)</option>
          <option value="con_stock">Con Stock</option>
          <option value="sin_stock">Sin Stock</option>
        </select>

        <select
          value={filtroPrecio}
          onChange={(e) => { setFiltroPrecio(e.target.value); setPage(1); }}
          className={styles.filterSelect}
        >
          <option value="todos">Todos (Precio)</option>
          <option value="con_precio">Con Precio</option>
          <option value="sin_precio">Sin Precio</option>
        </select>

        {/* Filtro de Marcas */}
        <div style={{ position: 'relative' }}>
          <button
            onClick={() => setMostrarMenuMarcas(!mostrarMenuMarcas)}
            style={{
              padding: '10px 16px',
              borderRadius: '6px',
              border: '1px solid #d1d5db',
              background: marcasSeleccionadas.length > 0 ? '#3b82f6' : 'white',
              color: marcasSeleccionadas.length > 0 ? 'white' : '#374151',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              fontWeight: '500',
              fontSize: '14px'
            }}
          >
            🏷️ Marcas {marcasSeleccionadas.length > 0 && `(${marcasSeleccionadas.length})`}
          </button>
          
          {mostrarMenuMarcas && (
            <>
              <div 
                style={{
                  position: 'fixed',
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  zIndex: 999
                }}
                onClick={() => setMostrarMenuMarcas(false)}
              />
              <div style={{
                position: 'absolute',
                top: '100%',
                left: 0,
                marginTop: '4px',
                background: 'white',
                border: '1px solid #d1d5db',
                borderRadius: '8px',
                boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
                zIndex: 1000,
                maxHeight: '400px',
                width: '300px',
                overflow: 'hidden',
                display: 'flex',
                flexDirection: 'column'
              }}>
                <div style={{ padding: '12px', borderBottom: '1px solid #e5e7eb' }}>
                  <input
                    type="text"
                    placeholder="Buscar marca..."
                    value={busquedaMarca}
                    onChange={(e) => setBusquedaMarca(e.target.value)}
                    style={{
                      width: '100%',
                      padding: '8px',
                      border: '1px solid #d1d5db',
                      borderRadius: '4px',
                      fontSize: '14px',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>
                
                <div style={{ padding: '8px', overflowY: 'auto', flex: 1 }}>
                  {marcasSeleccionadas.length > 0 && (
                    <button
                      onClick={() => {
                        setMarcasSeleccionadas([]);
                        setPage(1);
                      }}
                      style={{
                        width: '100%',
                        padding: '8px',
                        marginBottom: '8px',
                        background: '#ef4444',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '13px'
                      }}
                    >
                      Limpiar filtros ({marcasSeleccionadas.length})
                    </button>
                  )}
                  
                  {marcasFiltradas.map(marca => (
                    <label
                      key={marca}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        padding: '8px',
                        cursor: 'pointer',
                        borderRadius: '4px',
                        background: marcasSeleccionadas.includes(marca) ? '#eff6ff' : 'transparent',
                        transition: 'background 0.15s'
                      }}
                      onMouseEnter={(e) => {
                        if (!marcasSeleccionadas.includes(marca)) {
                          e.currentTarget.style.background = '#f3f4f6';
                        }
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = marcasSeleccionadas.includes(marca) ? '#eff6ff' : 'transparent';
                      }}
                    >
                      <input
                        type="checkbox"
                        checked={marcasSeleccionadas.includes(marca)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setMarcasSeleccionadas([...marcasSeleccionadas, marca]);
                          } else {
                            setMarcasSeleccionadas(marcasSeleccionadas.filter(m => m !== marca));
                          }
                          setPage(1);
                        }}
                        style={{ marginRight: '8px' }}
                      />
                      <span style={{ fontSize: '14px' }}>{marca}</span>
                    </label>
                  ))}
                  
                  {marcasFiltradas.length === 0 && (
                    <div style={{ padding: '16px', textAlign: 'center', color: '#6b7280', fontSize: '14px' }}>
                      No se encontraron marcas
                    </div>
                  )}
                </div>
              </div>
            </>
          )}
        </div>

        <button
          onClick={() => setMostrarExportModal(true)}
          style={{
            padding: '10px 16px',
            background: '#10b981',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            fontWeight: '600'
          }}
        >
          <img src={xlsIcon} alt="Excel" style={{ width: '20px', height: '20px' }} />
          Exportar Rebate
        </button>

        <button
          onClick={() => setMostrarCalcularWebModal(true)}
          style={{
            padding: '10px 16px',
            background: '#3b82f6',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            fontWeight: '600'
          }}
        >
          🧮 Calcular Web Transf.
        </button>

        <select
          value={pageSize}
          onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }}
          className={styles.filterSelect}
        >
          <option value={25}>25 por página</option>
          <option value={50}>50 por página</option>
          <option value={100}>100 por página</option>
          <option value={200}>200 por página</option>
        </select>
      </div>

      <div className={styles.tableContainer}>
        {loading ? (
          <div className={styles.loading}>Cargando productos...</div>
        ) : (
          <>
            <table className={styles.table}>
              <thead>
                <tr>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('item_id')}>
                    ID {getIconoOrden('item_id')} {getNumeroOrden('item_id') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('item_id')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('codigo')}>
                    Código {getIconoOrden('codigo')} {getNumeroOrden('codigo') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('codigo')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('descripcion')}>
                    Descripción {getIconoOrden('descripcion')} {getNumeroOrden('descripcion') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('descripcion')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('marca')}>
                    Marca {getIconoOrden('marca')} {getNumeroOrden('marca') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('marca')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('moneda_costo')}>
                    Moneda {getIconoOrden('moneda_costo')} {getNumeroOrden('moneda_costo') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('moneda_costo')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('costo')}>
                    Costo {getIconoOrden('costo')} {getNumeroOrden('costo') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('costo')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('stock')}>
                    Stock {getIconoOrden('stock')} {getNumeroOrden('stock') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('stock')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('precio_lista_ml')}>
                    Precio ML {getIconoOrden('precio_lista_ml')} {getNumeroOrden('precio_lista_ml') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('precio_lista_ml')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left', cursor: 'pointer', userSelect: 'none' }} onClick={() => toggleOrden('markup')}>
                    Markup {getIconoOrden('markup')} {getNumeroOrden('markup') && <span style={{ fontSize: '10px', marginLeft: '4px' }}>{getNumeroOrden('markup')}</span>}
                  </th>
                  <th style={{ padding: '12px', textAlign: 'left' }}>Rebate</th>
                  <th style={{ padding: '12px', textAlign: 'left' }}>Web Transf.</th>
                  <th style={{ padding: '12px', textAlign: 'left' }}>Mejor Oferta</th>
                  <th style={{ padding: '12px', textAlign: 'center' }}>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {productos.map(p => (
                  <tr key={p.item_id} style={{ borderBottom: '1px solid #e5e7eb' }}>
                    <td style={{ padding: '8px' }}>{p.item_id}</td>
                    <td style={{ padding: '8px', fontSize: '13px' }}>{p.codigo}</td>
                    <td style={{ padding: '8px', maxWidth: '300px' }}>
                      <div style={{ fontSize: '13px', lineHeight: '1.4' }}>{p.descripcion}</div>
                    </td>
                    <td style={{ padding: '8px' }}>{p.marca}</td>
                    <td style={{ padding: '8px' }}>{p.moneda_costo}</td>
                    <td style={{ padding: '8px' }}>${p.costo.toFixed(2)}</td>
                    <td style={{ padding: '8px', fontWeight: p.stock > 0 ? '600' : 'normal', color: p.stock > 0 ? '#059669' : '#dc2626' }}>
                      {p.stock}
                    </td>
                    <td style={{ padding: '8px' }}>
                      {editandoPrecio === p.item_id ? (
                        <div style={{ display: 'flex', gap: '4px' }}>
                          <input
                            type="number"
                            value={precioTemp}
                            onChange={(e) => setPrecioTemp(e.target.value)}
                            style={{ width: '100px', padding: '4px', borderRadius: '4px', border: '1px solid #d1d5db' }}
                          />
                          <button
                            onClick={() => guardarPrecio(p.item_id)}
                            style={{ padding: '4px 8px', background: '#10b981', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                          >
                            ✓
                          </button>
                          <button
                            onClick={() => setEditandoPrecio(null)}
                            style={{ padding: '4px 8px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                          >
                            ✗
                          </button>
                        </div>
                      ) : (
                        <div 
                          style={{ cursor: puedeEditar ? 'pointer' : 'default' }}
                          onClick={() => puedeEditar && iniciarEdicion(p)}
                        >
                          <div style={{ borderBottom: puedeEditar ? '1px dashed #ccc' : 'none', display: 'inline-block' }}>
                            {p.precio_lista_ml ? `$${p.precio_lista_ml.toLocaleString('es-AR')}` : 'Sin precio'}
                          </div>
                        </div>
                      )}
                    </td>
                    <td style={{ padding: '8px' }}>
                      {p.markup !== null && p.markup !== undefined ? (
                        <span style={{ color: getMarkupColor(p.markup), fontWeight: '600' }}>
                          {p.markup.toFixed(2)}%
                        </span>
                      ) : '-'}
                    </td>
                    <td style={{ padding: '8px' }}>
                      {editandoRebate === p.item_id ? (
                        <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
                          <label style={{ display: 'flex', alignItems: 'center', gap: '4px', fontSize: '12px' }}>
                            <input
                              type="checkbox"
                              checked={rebateTemp.participa}
                              onChange={(e) => setRebateTemp({...rebateTemp, participa: e.target.checked})}
                            />
                            Participa
                          </label>
                          <input
                            type="number"
                            step="0.1"
                            value={rebateTemp.porcentaje}
                            onChange={(e) => setRebateTemp({...rebateTemp, porcentaje: parseFloat(e.target.value)})}
                            style={{ padding: '4px', width: '60px', borderRadius: '4px', border: '1px solid #d1d5db' }}
                            placeholder="%"
                          />
                          <div style={{ display: 'flex', gap: '4px' }}>
                            <button
                              onClick={() => guardarRebate(p.item_id)}
                              style={{ padding: '4px 8px', background: '#10b981', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '12px' }}
                            >
                              ✓
                            </button>
                            <button
                              onClick={() => setEditandoRebate(null)}
                              style={{ padding: '4px 8px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '12px' }}
                            >
                              ✗
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div onClick={() => iniciarEdicionRebate(p)} style={{ cursor: 'pointer' }}>
                          {p.participa_rebate ? (
                            <div>
                              <div style={{ fontSize: '12px', color: '#059669', fontWeight: '600' }}>
                                ✓ {p.porcentaje_rebate}%
                              </div>
                              {p.precio_rebate && (
                                <div style={{ fontSize: '13px', fontWeight: '600', marginTop: '2px' }}>
                                  ${p.precio_rebate.toLocaleString('es-AR')}
                                </div>
                              )}
                            </div>
                          ) : (
                            <span style={{ fontSize: '11px', color: '#9ca3af' }}>-</span>
                          )}
                        </div>
                      )}
                    </td>
                    <td style={{ padding: '8px' }}>
                      {editandoWebTransf === p.item_id ? (
                        <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
                          <label style={{ display: 'flex', alignItems: 'center', gap: '4px', fontSize: '12px' }}>
                            <input
                              type="checkbox"
                              checked={webTransfTemp.participa}
                              onChange={(e) => setWebTransfTemp({...webTransfTemp, participa: e.target.checked})}
                            />
                            Participa
                          </label>
                          <input
                            type="number"
                            step="0.1"
                            value={webTransfTemp.porcentaje}
                            onChange={(e) => setWebTransfTemp({...webTransfTemp, porcentaje: parseFloat(e.target.value)})}
                            style={{ padding: '4px', width: '60px', borderRadius: '4px', border: '1px solid #d1d5db' }}
                            placeholder="%"
                          />
                          <div style={{ display: 'flex', gap: '4px' }}>
                            <button
                              onClick={() => guardarWebTransf(p.item_id)}
                              style={{ padding: '4px 8px', background: '#10b981', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '12px' }}
                            >
                              ✓
                            </button>
                            <button
                              onClick={() => setEditandoWebTransf(null)}
                              style={{ padding: '4px 8px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '12px' }}
                            >
                              ✗
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div onClick={() => iniciarEdicionWebTransf(p)} style={{ cursor: 'pointer' }}>
                          {p.participa_web_transferencia ? (
                            <div>
                              <div style={{ fontSize: '12px', color: '#059669', fontWeight: '600' }}>
                                ✓ {p.markup_web_real ? `${p.markup_web_real.toFixed(2)}%` : '-'}
                              </div>
                              <div style={{ fontSize: '10px', color: '#6b7280' }}>
                                (+{p.porcentaje_markup_web}%)
                              </div>
                              {p.precio_web_transferencia && (
                                <div style={{ fontSize: '13px', fontWeight: '600', marginTop: '2px' }}>
                                  ${p.precio_web_transferencia.toLocaleString('es-AR')}
                                </div>
                              )}
                            </div>
                          ) : (
                            <span style={{ fontSize: '11px', color: '#9ca3af' }}>-</span>
                          )}
                        </div>
                      )}
                    </td>
                    <td style={{ padding: '8px' }}>
                      {p.mejor_oferta ? (
                        <div style={{ fontSize: '12px' }}>
                          <div style={{ fontWeight: '600', color: '#059669' }}>
                            ${p.mejor_oferta.oferta.precio_final.toLocaleString('es-AR')}
                            {p.mejor_oferta.oferta.aporte_meli_porcentaje > 0 && (
                              <span style={{ marginLeft: '4px', fontSize: '10px', color: '#f97316' }}>
                                (-{p.mejor_oferta.oferta.aporte_meli_porcentaje}%)
                              </span>
                            )}
                          </div>
                          <div style={{ fontSize: '10px', color: '#6b7280' }}>
                            Hasta {new Date(p.mejor_oferta.oferta.fecha_hasta).toLocaleDateString('es-AR', { day: '2-digit', month: '2-digit' })}
                          </div>
                          {p.mejor_oferta.oferta.pvp_seller > 0 && (
                            <div style={{ fontSize: '11px', marginTop: '4px', borderTop: '1px solid #e5e7eb', paddingTop: '4px' }}>
                              <div style={{ color: '#374151' }}>
                                PVP: ${p.mejor_oferta.oferta.pvp_seller.toLocaleString('es-AR')}
                              </div>
                              {p.mejor_oferta.oferta.markup_oferta !== null && (
                                <div style={{
                                  fontSize: '10px',
                                  color: getMarkupColor(p.mejor_oferta.oferta.markup_oferta),
                                  fontWeight: '600'
                                }}>
                                  {p.mejor_oferta.oferta.markup_oferta}%
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      ) : '-'}
                    </td>
                    <td style={{ padding: '8px', textAlign: 'center' }}>
                      <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>
                        {puedeEditar && (
                          <button
                            onClick={() => setProductoSeleccionado(p)}
                            style={{
                              padding: '6px 8px',
                              background: '#3b82f6',
                              color: 'white',
                              border: 'none',
                              borderRadius: '4px',
                              cursor: 'pointer',
                              fontSize: '16px'
                            }}
                            title="Ver detalle"
                          >
                            🔍
                          </button>
                        )}
                        <button
                          onClick={() => verAuditoria(p.item_id)}
                          style={{
                            padding: '6px 8px',
                            background: '#8b5cf6',
                            color: 'white',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: 'pointer',
                            fontSize: '16px'
                          }}
                          title="Ver historial de cambios"
                        >
                          📋
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {auditoriaVisible && (
              <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: 'rgba(0,0,0,0.5)',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                zIndex: 1000
              }}>
                <div style={{
                  background: 'white',
                  borderRadius: '12px',
                  padding: '24px',
                  maxWidth: '800px',
                  width: '90%',
                  maxHeight: '80vh',
                  overflow: 'auto'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '20px' }}>
                    <h2>📋 Historial de Cambios de Precio</h2>
                    <button
                      onClick={() => setAuditoriaVisible(false)}
                      style={{
                        padding: '8px 16px',
                        background: '#ef4444',
                        color: 'white',
                        border: 'none',
                        borderRadius: '6px',
                        cursor: 'pointer'
                      }}
                    >
                      Cerrar
                    </button>
                  </div>

                  {auditoriaData.length === 0 ? (
                    <p style={{ textAlign: 'center', color: '#666' }}>No hay cambios registrados</p>
                  ) : (
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e5e7eb', textAlign: 'left' }}>
                          <th style={{ padding: '12px' }}>Fecha</th>
                          <th style={{ padding: '12px' }}>Usuario</th>
                          <th style={{ padding: '12px' }}>Precio Anterior</th>
                          <th style={{ padding: '12px' }}>Precio Nuevo</th>
                          <th style={{ padding: '12px' }}>Cambio</th>
                        </tr>
                      </thead>
                      <tbody>
                        {auditoriaData.map(item => {
                          const cambio = item.precio_nuevo - item.precio_anterior;
                          const porcentaje = ((cambio / item.precio_anterior) * 100).toFixed(2);

                          return (
                            <tr key={item.id} style={{ borderBottom: '1px solid #e5e7eb' }}>
                              <td style={{ padding: '12px' }}>
                                {formatearFechaGMT3(item.fecha_cambio)}
                              </td>
                              <td style={{ padding: '12px' }}>
                                <div>
                                  <strong>{item.usuario_nombre}</strong>
                                  <br />
                                  <small style={{ color: '#666' }}>{item.usuario_email}</small>
                                </div>
                              </td>
                              <td style={{ padding: '12px' }}>
                                ${item.precio_anterior.toFixed(2)}
                              </td>
                              <td style={{ padding: '12px' }}>
                                ${item.precio_nuevo.toFixed(2)}
                              </td>
                              <td style={{ padding: '12px' }}>
                                <span style={{
                                  color: cambio >= 0 ? '#059669' : '#dc2626',
                                  fontWeight: 'bold'
                                }}>
                                  {cambio >= 0 ? '+' : ''}{cambio.toFixed(2)} ({porcentaje}%)
                                </span>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  )}
                </div>
              </div>
            )}

            <div className={styles.pagination}>
              <button
                onClick={() => setPage(p => Math.max(1, p - 1))}
                disabled={page === 1}
                className={styles.paginationBtn}
              >
                ← Anterior
              </button>
              <span>Página {page} {totalProductos > 0 && `(${((page-1)*pageSize + 1)} - ${Math.min(page*pageSize, totalProductos)})`}</span>
              <button
                onClick={() => setPage(p => p + 1)}
                disabled={productos.length < pageSize}
                className={styles.paginationBtn}
              >
                Siguiente →
              </button>
            </div>
          </>
        )}
      </div>

      {productoSeleccionado && (
        <PricingModal
          producto={productoSeleccionado}
          onClose={() => setProductoSeleccionado(null)}
          onSave={() => {
            setProductoSeleccionado(null);
            cargarProductos();
            cargarStats();
          }}
        />
      )}

      {mostrarExportModal && (
        <ExportModal onClose={() => setMostrarExportModal(false)} />
      )}

      {mostrarCalcularWebModal && (
        <CalcularWebModal 
          onClose={() => setMostrarCalcularWebModal(false)}
          onSuccess={() => {
            cargarProductos();
            cargarStats();
          }}
        />
      )}
    </div>
  );
}
